version: '3.8'

services:
  # ---------------------------
  # API Gateway
  # ---------------------------
  api-gateway:
    container_name: "api-gateway"
    hostname: "api-gateway"
    build: ../../api-gateway/target
    ports:
      - "8080:8080"
    expose:
      - "8080" 
    depends_on:
      - ?
    environment:
      - SPRING_PROFILES_ACTIVE=${profile}
    networks:
      - ?

  # ---------------------------
  # Service One
  # ---------------------------
  service-one:
    container_name: "service-one"
    hostname: "service-one"
    build: ../../service-one/target
    ports:
      - "8082:8082"
    depends_on:
      - rabbit
      - service-one-db
      - consul
      - logstash
    environment:
      - SPRING_PROFILES_ACTIVE=${profile}
    networks:
      - ?

  # ---------------------------
  # Service One Database
  # ---------------------------
  service-one-db:
    

  # ---------------------------
  # Service Two
  # ---------------------------
  service-two:


  # ---------------------------
  # Service Two Database
  # ---------------------------
  service-two-db:
    container_name: "service-two-db"
    hostname: "servicetwodb"
    image: "mysql/mysql-server:latest"
    platform: linux/arm64/v8
    environment:
      - MYSQL_ROOT_PASSWORD=root123
      - MYSQL_DATABASE=service-two
      - MYSQL_USER=service-two 
      - MYSQL_PASSWORD=service-two
    ports:
      - "3310:3306"
    expose:
      - "3310"
    networks:
      - backend

  # ---------------------------
  # Web Application
  # ---------------------------
  web-application:
    container_name: web-application
    image: nginx:1.23.0-alpine
    platform: linux/arm64/v8
    build:
      context: ../../web-application
      dockerfile: docker/Dockerfile
    volumes:
      - ./dist:/usr/share/nginx/html
    ports:
      - "80:4200"

    networks:
      - frontend

  # ---------------------------
  # Messaging Queue Cluster
  # ---------------------------
  rabbit:
    

  # ---------------------------
  # Registration and
  # Discovery Cluster
  # ---------------------------
  consul:
    image: consul:1.12.2
    platform: linux/arm64/v8
    container_name: "consul"
    hostname: "consul"
    command: consul agent -server -client 0.0.0.0 -ui -bootstrap-expect=3 -data-dir=/consul/data -retry-join=consul2 -retry-join=consul3 -datacenter=blr
    ports:
      - "8500:8500"
      - "8600:8600"
    networks:
      - backend
  consul2:
    image: consul:1.12.2
    platform: linux/arm64/v8
    container_name: "consul-2"
    hostname: "consul2"
    expose:
      - "8500"
      - "8600"
    command: consul agent -server -data-dir=/consul/data -retry-join=consul -retry-join=consul3 -datacenter=blr
    links:
      - consul
    networks:
      - backend
  consul3:
    image: consul:1.12.2
    platform: linux/arm64/v8
    container_name: "consul-3"
    hostname: "consul3"
    expose:
      - "8500"
      - "8600"
    command: consul agent -server -data-dir=/consul/data -retry-join=consul -retry-join=consul2 -datacenter=blr
    links:
      - consul
      - consul2
    networks:
      - backend

  # -----------------------------
  # Infrastructure Visualization
  # -----------------------------
  scope:
    image: weaveworks/scope:latest
    container_name: weave-scope
    hostname: weave-scope
    pid: "host"
    privileged: true
    ports:
      - "4040:4040"
    expose:
      - "4040"
    labels:
      - "works.weave.role=system"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:rw"
    command:
      - "--probe.docker"
      - "true"
    networks:
      - backend

  # -----------------------------
  # Log Vizualization 
  # -----------------------------
  kibana:
    image: kibana:8.2.3
    platform: linux/arm64/v8
    container_name: kibana
    hostname: kibana
    ports:
      - "5601:5601"
    expose:
      - "5601"
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    links:
      - elasticsearch
    networks:
      - backend

  # -----------------------------
  # Indexing Server
  # -----------------------------
  elasticsearch:
    image: elasticsearch:8.2.3
    platform: linux/arm64/v8
    container_name: elasticsearch
    hostname: elasticsearch
    environment:
      - "cluster.name=elasticsearch"
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      # - "discovery.zen.ping.unicast.hosts=127.0.0.1"
      - "discovery.type=single-node"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - "9200:9200"
      - "9300:9300"
    expose:
      - "9200"
    networks:
      - backend

  # -----------------------------
  # Log Collection and Format
  # -----------------------------
  logstash:
    image: logstash:8.2.3
    platform: linux/arm64/v8
    container_name: log-stash
    hostname: logstash
    ports:
      - "5001:5001"
    expose:
      - "5001"
    volumes:
      - /Users/Shared/data/tools/logstash/:/tmp/
    command: >
      logstash --debug -e 'input { tcp { port => 5001 codec => json { charset => "UTF-8" } } } output { elasticsearch { hosts => "elasticsearch:9200" } }'
    depends_on:
      - elasticsearch
    networks:
      - backend

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  mongodata:
  